// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/aggregator.tmpl
// templates/clusteragent.tmpl
// templates/collector.tmpl
// templates/compliance.tmpl
// templates/custommetricsprovider.tmpl
// templates/dogstatsd.tmpl
// templates/endpoints.tmpl
// templates/forwarder.tmpl
// templates/header.tmpl
// templates/jmxfetch.tmpl
// templates/logsagent.tmpl
// templates/metadatamapper.tmpl
// templates/orchestrator.tmpl
// templates/runtimesecurity.tmpl
// templates/snmp-traps.tmpl
// templates/systemprobe.tmpl
// templates/trace-agent.tmpl

package status

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAggregatorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcd\x8e\xda\x30\x14\x85\xf7\x79\x8a\xbb\x46\xed\x64\x8f\xd4\x45\x3b\xa5\x9a\x4d\x87\x05\xed\x03\x98\xf8\xc6\xb6\xf0\x4f\x64\xdf\x30\x52\xa3\xbc\x7b\x45\x0c\x21\x3f\x36\x0c\xab\xe8\xdc\x73\xbe\xeb\x1c\x22\x77\x5d\xb9\x29\xde\xf7\x7f\x76\x5b\x78\x95\xcc\x0a\x0c\x60\x18\x47\x20\x07\x24\x55\x00\x42\xd3\x68\x46\x08\x41\xba\x56\x73\x38\x22\x78\xac\x35\x56\x84\x1c\x9c\x05\x92\x08\xb5\xd3\xda\x7d\x28\x2b\x46\x77\xf8\x02\xaa\x06\xd6\x34\x5a\x55\xec\xa8\x71\x5b\x6c\xa0\x32\xbc\x64\x02\x2d\x95\xa2\x55\xe5\x59\xe1\x47\x28\x47\x7f\x29\xd0\xa2\x67\xfa\x40\x8c\xda\xf0\x42\xa6\xd1\xc5\xa6\xec\xfb\x6f\xb7\x5f\xf1\x5d\x08\x8f\x82\x91\xf3\xc5\x5d\xec\xba\xaf\x97\x45\x2f\xaf\x12\xab\x53\xf8\x8d\xe4\x55\x75\x60\xa6\xd1\x08\x7d\x5f\x00\x44\x1d\xe2\x00\xe2\x64\x0b\x5d\x27\x5b\xc3\xac\xfa\x87\xa9\x64\xdf\x0f\x58\xb4\x1c\xae\x8f\x97\x0d\x3f\x9d\x08\xc4\x28\xf0\x85\x15\x60\x9c\x3c\x5a\x93\x8b\x27\x36\xed\xce\x68\x69\x20\x0f\x4f\x73\xce\x6d\x98\xcb\x85\x5f\xba\x0d\x12\xf9\x3d\x1f\xe0\x2a\x25\x40\x13\xf7\x63\xe0\xce\x7b\xe7\xc3\x0a\x0a\x51\xcf\x92\xc7\x58\x82\xfe\xde\x9a\x23\xfa\x7d\x3d\x18\x07\x72\x54\x60\x5f\x5f\x4f\xbc\xe0\x2e\x03\x09\xe6\x01\xbd\xc2\x59\x05\x51\x49\x57\xb0\x74\x3f\x06\x4e\x2a\x98\x42\x93\x15\xa4\x62\x69\xfa\x59\x55\x38\x7c\x82\x37\xf0\x45\x88\x9f\xed\x0a\x39\xf5\x3e\xa1\x2d\x2a\xb8\x43\xf3\x55\x24\xb2\x9f\x59\x32\xaf\x65\xb5\x28\x57\x4f\x06\x92\xda\x78\x42\xaa\xe4\xe2\x5f\xbd\x6a\x99\x97\x59\x25\x9e\x61\xa7\x2f\x31\x43\xa7\x8f\x9f\x8c\x26\x76\xc4\x22\xde\x54\x20\x27\x3c\x33\x3f\xda\xea\x84\x94\xbd\xa4\x46\x1f\x44\xe3\xf3\x5b\xeb\x01\x39\x7d\xa0\x37\x17\xc8\x32\x83\x7f\x1b\xce\x28\xde\x5e\x37\x09\xa2\x36\x5f\xb3\xf2\x4f\x98\xc5\xff\x00\x00\x00\xff\xff\x5a\xa7\xa4\x24\x3a\x06\x00\x00")

func bindataAggregatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataAggregatorTmpl,
		"/aggregator.tmpl",
	)
}

func bindataAggregatorTmpl() (*asset, error) {
	bytes, err := bindataAggregatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/aggregator.tmpl",
		size:        1594,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataClusteragentTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x6a\xc3\x30\x10\x45\xf7\x3e\xc5\xdf\x75\x15\x1f\xa0\xd0\x45\x71\x72\x81\x16\xba\x37\xd2\xd8\x11\x88\x99\x22\x8d\x02\x45\xe4\xee\x45\x56\x5c\xdc\x20\xdb\x2b\x23\x0d\xef\xbd\x51\xf7\xd6\xfa\xba\xf3\xa8\xa3\x95\x19\x83\x4f\x51\x29\xe0\x7d\x26\xd6\x9d\xd9\x9c\xe1\x26\xf4\x67\x52\x32\xea\x84\x2f\x21\x48\xc0\xfd\xde\x01\x27\x0c\x92\xbc\x05\x8b\xc2\x2e\xf7\xd0\x2b\xa1\x49\x7f\x89\x20\xb6\xdf\xe2\x58\x5f\x91\x73\x0b\x98\x33\xc8\x47\x5a\xd9\x4d\xcc\x1f\xe4\x21\x24\x5b\x69\x97\xf5\x78\xe1\x9c\xca\xd8\xfa\x5b\xea\x07\x61\x3e\xcc\x0f\x34\x9a\xeb\x7e\x7d\x95\x34\x28\x4f\xae\x22\x2b\xb8\xfe\x8b\x42\x74\xc2\x2d\x91\x06\x47\x37\x5a\x5c\xb7\xc7\x94\x4c\xfb\xea\xfe\xff\xbb\x7c\x26\x63\x28\xc6\x29\x79\xff\x03\x53\x83\xc8\x42\xe5\x88\x50\x12\x3e\x12\xb3\xe3\xb9\x6e\xb2\xc9\xdb\x6c\xf0\x1b\x00\x00\xff\xff\xcf\x52\x20\xcf\x2e\x02\x00\x00")

func bindataClusteragentTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataClusteragentTmpl,
		"/clusteragent.tmpl",
	)
}

func bindataClusteragentTmpl() (*asset, error) {
	bytes, err := bindataClusteragentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/clusteragent.tmpl",
		size:        558,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCollectorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4b\x6f\xe3\x38\x0c\xbe\xfb\x57\x10\x41\x0f\xd3\x41\x93\x1c\xe6\x16\xa0\x87\x41\x93\x43\x80\xb6\x3b\xd8\x74\xb0\x67\xd5\x66\x62\xa1\xb6\x9c\x95\xe4\xb4\x1d\x43\xff\x7d\x41\x3d\x6c\xf9\x91\xb4\xbb\x3b\x39\xc9\xd4\xc7\x8f\x8f\x50\x24\x9b\x66\xf9\x35\x79\xfc\xe3\x69\xb3\x82\xbb\x9c\x89\x03\x2a\x28\x59\x86\xa0\x2b\xd0\x39\x57\xa0\xb1\x3c\x16\x4c\x23\xa8\xbc\xaa\x8b\x0c\x9e\x11\x24\xee\x0b\x4c\x35\x66\x50\x09\xd0\x39\xc2\xbe\x2a\x8a\xea\x95\x8b\x43\x8b\x56\x37\xc0\xf7\xc0\x8e\xc7\x82\xa7\xec\xb9\xc0\x55\xf2\x15\xd2\x32\x5b\xb2\x03\x0a\xbd\x3c\xd4\x7c\x79\xe2\xf8\xaa\x96\x2d\x7e\x99\x56\x05\x91\x56\x72\xa7\x99\xae\xd5\x42\x97\xc7\xe2\x43\x25\xc5\xc5\xa1\xc0\xbb\x1c\xd3\x17\xaf\xb0\x34\xe6\x36\xfc\x92\xbb\xc0\x99\x74\xb2\xa4\x69\xe6\xf0\xca\x75\x0e\x8b\xe3\xbb\xce\x2b\xb1\x15\x5c\xc3\xdc\x98\x04\x80\xae\xf8\x1e\x16\x1b\x29\x2b\xa9\xc0\xca\xec\x19\xb8\xe0\x9a\xb3\x82\xff\xa2\x20\x7f\x58\xbd\x04\xe0\xf6\xdc\x2f\x01\x20\x36\x90\x94\x50\xb8\x42\x29\x61\x75\xdb\xf2\x3a\x63\x00\x73\x82\xd8\x4b\x2f\x68\x1a\x40\x91\x41\xeb\x0b\x7d\x10\x38\x9c\x8d\x49\x12\x80\x3f\x6b\x21\xc8\x0d\x1b\xb6\x1a\xb9\x11\x05\x48\x48\xb4\x09\x55\x10\x07\xc8\x44\x06\x5f\x44\xa5\x2d\x42\x5d\xfb\xb3\xe3\xbb\xf6\xbe\x3c\x56\x90\x5a\x01\xe4\xec\x84\x20\x6b\x01\xef\xa8\x2d\x47\x70\xcb\x13\xfa\x20\xad\xfa\x23\x2b\xf1\xc6\x9f\xb7\x42\x69\x26\x52\x54\x36\x76\xc7\xde\x05\x7a\x75\x42\xa9\x78\x25\xe8\x32\x1c\x87\x7a\x2d\xba\x23\x37\xa6\x69\x28\x84\x56\xdd\x18\xf8\xd2\x34\xe1\xd3\x98\xeb\x38\x89\xa4\x7b\x94\x5c\xe8\x35\x53\x39\xaa\xc8\x49\x98\xcd\x67\xc4\x35\x1f\x90\x0d\xf0\xe1\xc2\xa2\xe7\xf3\xf9\x90\xbc\x1f\xfd\xc8\x73\x80\x20\x82\xed\x7a\x05\x4d\xe3\xd2\xb0\x5d\x1b\x03\x4d\xa3\x6c\xa5\xc3\xa2\x05\xdf\x55\x62\xcf\x0f\xb5\x64\x9a\x6c\xee\xaa\x5a\xa6\xd8\x69\xb9\x5b\x27\x6d\x55\x9e\x2a\xcd\x0a\x2a\x09\x45\xc0\xbc\x2e\x99\xe0\xbf\x10\x16\x56\x4e\xe2\x16\xf9\x80\x5a\xf2\x14\x76\xac\x3c\x16\xa8\x56\x70\xcf\x94\x26\xc5\xbe\x9e\x43\x79\x90\x31\x37\xce\xc0\x04\xf7\x00\xe8\x8d\x6c\x4e\x28\xf4\x59\x72\x77\x7b\x89\x35\x20\x3c\xdd\x0e\xe5\x89\xa7\xe8\x4b\xfd\x1c\xad\x47\x85\x0a\x3b\xcf\x3e\x00\x7a\x23\xdf\x4f\x28\xd9\x01\x61\xf3\x86\x69\x6d\x33\xff\xc4\x4b\x84\x58\x7f\x1d\xfe\x93\x85\x07\xb7\x58\x0b\x9d\x95\x6a\xd6\xd2\x59\x1f\x3b\xae\x35\xf5\x4e\xe2\xda\x57\xb2\x64\xfa\xa7\xe0\x6f\x56\x67\xf1\xf3\x98\x31\x8d\x74\x56\x9a\x95\xc7\xbe\xfe\xae\x4e\x53\x54\x6a\x5f\x17\x53\x54\xb6\x49\x11\xce\xc3\xec\x05\xd5\xee\xd0\xc6\x00\x63\x1f\x0f\x16\x8a\xc0\x8f\x78\x42\xd9\x2f\xe7\xb6\x3f\x5c\xb9\x82\x7b\x40\xcd\x32\xa6\xd9\xe8\x9e\x8b\x0c\xdf\x46\xa8\x50\xdb\x1d\xbc\xf4\x57\xab\x48\xdd\xbf\x97\x97\x1b\xb8\x3a\xd1\xdb\xff\x2c\x97\x6b\x1a\x2f\x60\xcc\xca\xb5\x8f\xbe\x57\xa3\x30\x3e\x12\x84\x14\xba\xfe\x3e\xef\x2a\x98\xbe\xc9\x44\x11\x2e\x1f\x50\x29\xaa\x8f\x0e\x1e\xd1\xb4\xa8\x27\xc9\x52\x7c\x66\xe9\xcb\x34\xed\xa4\x4b\xc1\x87\xbf\x98\xa4\x8e\xae\x22\x7c\x9c\xac\x3e\xa6\x85\x78\x89\x6d\x10\xfd\x34\x85\x06\x3d\x69\xba\xf7\x19\x7d\xc4\x43\x26\x9e\x91\xf7\x15\xcb\xa6\x86\xc8\xe2\xc7\xfb\xb7\xbe\x53\x6e\x2e\xc2\x37\xb8\xe7\x42\xa3\x0c\x0e\x8e\x47\xd4\x70\x4e\x4e\xce\x90\xd7\xc0\xbd\xba\x85\x09\x63\xa1\x22\xba\x8e\x1e\x89\x2f\xf5\xfc\x71\x2d\xf2\xec\xad\xb3\x47\xe6\x5a\xdb\xbd\xb4\x06\xe9\xf9\xc4\xa2\xc8\x86\x59\xed\xd2\x15\x9a\x3b\xc6\xdb\x85\xf5\x0d\xb6\x61\xbb\x70\x4d\xc6\x01\x2e\xed\x17\xb4\xc7\xf4\x57\x8c\x38\x73\xe8\x0c\xd8\xbc\x4d\x5a\xfd\xed\xb9\xf3\x0b\x8e\xb7\xec\x56\x03\xfa\xf1\x30\xfd\x9a\x86\x90\xc6\xac\x92\x38\xa1\x28\xe5\x07\x55\xfa\xb9\x22\xfd\x5e\xeb\xca\x4f\xc7\x71\x99\xba\x8b\x4d\xf0\x2c\x4c\xd9\x73\x59\x1e\x96\xa4\x5d\x82\x44\x94\x58\xb7\xcd\x44\xa4\xd1\x9a\xd2\x82\xa7\xb7\x8f\xf6\x7a\x90\x4d\x47\x7c\xe1\x7d\x9e\x8d\xdc\xfe\x3f\xbb\x34\xc7\xac\x2e\x26\x1f\xa9\x7b\xbd\x51\xf4\x24\xa0\x32\xff\xaf\xe1\xbb\x6d\x2e\xa6\xfd\xff\xf1\x77\x53\x81\x8b\x6c\x54\x4e\xa3\xae\xc8\xf7\x80\x7f\x3b\x30\xcc\x7c\xd3\x71\x0f\xc9\xb9\x35\x8b\xcb\xd9\xc2\xa8\xf0\xce\xd4\x9d\x6b\x98\x6e\x26\xfe\x4b\xa5\x0b\x13\xe6\xe3\x3f\xf1\x9f\x00\x00\x00\xff\xff\x21\x87\xd6\xec\x78\x0d\x00\x00")

func bindataCollectorTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataCollectorTmpl,
		"/collector.tmpl",
	)
}

func bindataCollectorTmpl() (*asset, error) {
	bytes, err := bindataCollectorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/collector.tmpl",
		size:        3448,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataComplianceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xc1\x8e\x1a\x3d\x0c\xbe\xef\x53\x58\x23\x0e\xbb\xd2\xcf\x3c\x00\xd2\x1e\x7e\x01\x95\x50\xbb\x5b\x09\xd8\xf6\x50\xf5\xe0\x0e\x06\x22\x66\x1c\x94\x64\x58\xb6\xa3\x79\xf7\x2a\x99\x84\x64\x80\x45\x70\x8a\xed\xcf\x9f\x63\xfb\x23\x33\x96\xd5\xbe\x14\xc8\x05\xc1\x78\x4b\xc5\x4e\x3f\x3c\x7f\xf6\x7b\x68\x9a\x21\x0c\x54\xcd\x4c\x6a\x61\xd0\x68\x18\x3d\x43\x3e\x4f\xec\xb6\x75\x18\x85\xbc\x21\x18\x38\x3e\x87\x89\x45\xba\x1a\x16\x08\xd0\x34\x1e\x93\xbf\x62\x45\xc1\xb7\x57\x82\xcd\x04\xf5\x96\x74\x2f\x9c\x0d\x33\x87\x00\xf8\xa2\xb0\xa2\x77\xa9\x76\xa3\x84\xe2\xe4\x84\xb6\x85\xc7\xe8\xff\x41\x4a\x0b\xc9\xd0\xb6\x4f\x2e\x79\x21\x6b\x55\x50\x9a\xd9\x79\x42\xf9\x21\x88\x75\x88\xcc\x58\x98\xa9\x52\x52\x81\xaf\x3c\x96\xbc\x16\x9b\x5a\xa1\x11\x92\x47\xf0\xab\x69\xe0\x83\xca\x52\xbe\x2f\xe9\x68\xae\x65\xfd\xf6\x9c\x54\x6a\xba\x41\xb2\x51\x44\xec\x38\xb2\xef\x5f\xb3\x98\x16\xaf\xf2\x0d\xb5\x99\x1e\x88\x8d\x65\x71\x34\x73\xda\x4b\x65\x46\xee\x6c\x2d\x5d\x97\xc6\xb5\x55\x9c\x86\xdd\x39\x2f\x28\x72\xd5\xf9\xfd\x7d\x00\x26\x68\x30\x10\x25\xfb\xdb\xfd\x07\x83\x83\xdd\xdf\x05\xc1\x0a\x0d\xc6\xf4\x6e\x93\x76\xf0\xdd\x58\x0f\x31\xe4\x7a\xe7\x55\x1c\x6e\xcf\x10\x6b\x40\x5e\xf5\x24\x95\x7b\x81\x3c\x0a\x5e\xd1\xf1\x6a\x28\x11\xc5\x53\xa8\x64\xcb\x16\xd6\x3d\x63\x6d\x6c\xeb\x4e\x9b\x77\x71\x44\x8a\x53\xe3\x67\x4c\x1e\xb0\x94\x06\x4b\x98\xd7\xac\x6d\x9b\xdb\xba\x42\x16\x7f\x09\x72\xe7\xb7\x6e\x8f\xfb\xff\x40\x0a\x37\x04\xd3\x23\x15\xb5\xdd\x31\x2c\x45\x45\x90\x26\x4d\xfc\xf6\x21\xf7\xe0\x13\xd6\x41\xb3\x4a\x07\xad\xdb\x99\x27\x4c\x13\x34\x1d\xd3\x5a\xaa\x0a\xcd\x1b\x8b\xa3\xcb\xc8\xdf\xf6\x2b\x34\x64\xcf\xda\x60\xb5\x4f\xb3\x17\x75\x51\x90\xd6\xeb\xba\xbc\x46\x64\x97\xe0\x36\xeb\x61\x2e\xd0\xb6\x97\x15\xce\x30\x16\x12\x64\xfd\x4a\x07\x52\xd6\x0c\xcb\x0d\xf3\xb4\xfa\xed\x46\xfe\x42\x06\xfb\xaa\xf1\x71\xbf\xa3\x33\x54\x67\xce\x26\x11\x5e\xf9\xd0\x2d\x9d\xde\xcb\x75\xaf\x60\xef\x77\x84\x21\xf6\x5e\x0b\x67\xd8\x0a\x65\x88\xbc\x90\xd6\x56\x1a\x11\x9b\xb0\x9c\x50\x4b\x85\x05\xfd\xc1\x62\x97\x72\x0e\xef\xbb\xc0\x4f\x54\x2c\x78\xa3\xfb\xcd\x86\x51\x5d\x85\x78\xdb\x5e\x34\x3f\xcb\xba\xd5\xf8\xe5\x5f\x3b\x79\xe3\xfa\x6f\x5a\xf7\x21\xd8\xa2\x06\x96\x06\x54\xcd\xf0\x41\x26\xfb\xe4\x51\xf0\x46\x94\xd3\xbf\x00\x00\x00\xff\xff\x73\x9f\x21\x08\xa2\x06\x00\x00")

func bindataComplianceTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataComplianceTmpl,
		"/compliance.tmpl",
	)
}

func bindataComplianceTmpl() (*asset, error) {
	bytes, err := bindataComplianceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/compliance.tmpl",
		size:        1698,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCustommetricsproviderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3d\x4f\xf3\x30\x10\xc7\xf7\x7e\x8a\x1b\x3a\x3d\x7a\x6a\xf6\x48\x9d\x80\x0d\x58\x0a\xec\xd7\xe4\x02\x56\xfd\x12\xd9\x4e\x54\xb0\xfc\xdd\x51\x2e\x71\x30\x90\x42\x96\xe8\x7c\xbf\xff\xff\xde\xae\x7b\x1f\xac\x86\x7b\x0a\x4e\xd6\x1e\x0e\xe4\x06\x72\x9b\xfd\xda\xb7\x01\x88\x71\x07\xb2\x05\x51\xb3\x4a\x4f\x22\x71\x23\x3d\x1e\x15\x35\x90\xd2\x06\x00\xe0\x10\x30\xf4\xbe\x82\x18\xff\x22\xd7\xfd\x6e\x9d\xb3\x2e\x23\x1c\xac\x79\x7d\xa1\x62\x04\x52\x9e\x72\xf8\x68\x03\xaa\x55\xd1\x39\x90\x33\xa8\x04\x13\x19\x7f\x46\x25\x9b\x5f\x71\x26\x8a\x62\x0e\xcd\x0b\xc1\x76\xe2\xa0\xda\x5f\x14\xe6\xc5\xb2\xf4\x1f\xc4\x38\x6b\x84\xa3\x96\x1c\x99\x9a\x44\x78\xeb\x28\x25\xe8\x6c\x03\xd8\x07\xeb\x6b\x54\xc4\x13\xff\x44\x0d\x6a\xf2\x1d\xd6\x94\xd2\xd5\xa5\xfc\xdc\xe4\x54\x18\xc6\x97\xd2\x6b\xfa\x3d\x7c\x72\x77\x78\x24\xe5\xab\xe5\x1c\xf3\x64\xa7\xff\xb0\x1d\xc6\xc1\xb2\x50\x31\x97\x57\xb0\x1b\x2d\x4f\x29\xb1\xf5\x50\x5c\x93\x4c\x53\x6c\xb5\xe7\xda\xf0\xda\x6b\x34\xf2\x7d\x59\x98\x18\xc6\x54\xbe\x95\xd4\xe4\x03\xea\x8e\xd1\xd6\x3a\x8d\xe1\xc9\xc8\xf3\xf8\xbe\x08\x82\xff\x7e\xaa\xc2\x4a\x36\xeb\x0d\xe4\x70\xc7\x71\x91\xfc\x08\x00\x00\xff\xff\x68\xd3\xef\x7f\xf5\x02\x00\x00")

func bindataCustommetricsproviderTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataCustommetricsproviderTmpl,
		"/custommetricsprovider.tmpl",
	)
}

func bindataCustommetricsproviderTmpl() (*asset, error) {
	bytes, err := bindataCustommetricsproviderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/custommetricsprovider.tmpl",
		size:        757,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDogstatsdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xbf\x6e\xf3\x30\x10\xc3\x77\x3d\x05\x87\x4c\x46\xbe\x68\x37\x90\xe9\x4b\xd7\x76\x68\x5e\xe0\x62\x9f\x65\xa1\x27\xc9\xb0\xce\x09\x5a\xe1\xde\xbd\x48\xff\xa4\x1c\xc9\x1f\x09\xb6\xe6\x3b\xf7\xfc\x72\x7e\xea\xf1\x7f\xa6\x1c\xb8\x22\xd1\xc8\xd0\x02\x9d\x63\x85\x72\x5a\x84\x94\x51\xe7\xb2\xc9\x88\x0b\x63\xe5\x49\x78\x50\x1e\x51\x32\x74\x66\x4c\x45\xa4\xdc\x62\x0e\x0f\xba\xee\x11\x27\xd0\xb2\x48\x1c\xe8\x22\xdc\xbb\x0e\x43\x1a\x3d\x05\xce\xea\xc3\x16\xfd\x35\xf2\xad\xfa\x07\xef\x03\x67\x5e\x49\x5e\x95\x74\xab\x07\x4d\x8b\xb8\xce\x9b\x1d\x7f\xe5\x4e\x25\xdc\xc3\x7a\x72\x7f\x5e\x6b\xff\xb0\xde\x4f\x63\xf7\xc6\xef\x7b\xec\xae\x24\x1b\xa3\x3f\xe2\x60\xe6\x80\xd6\xa6\xb2\x26\xd2\x73\x54\xf9\x66\xcc\x7a\xb4\x36\x6f\x89\x72\xfc\xe0\x9f\x82\xd9\xd7\x12\xe7\x11\x66\xee\x33\x00\x00\xff\xff\xa8\xce\xb3\x10\x12\x01\x00\x00")

func bindataDogstatsdTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataDogstatsdTmpl,
		"/dogstatsd.tmpl",
	)
}

func bindataDogstatsdTmpl() (*asset, error) {
	bytes, err := bindataDogstatsdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/dogstatsd.tmpl",
		size:        274,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataEndpointsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\xc1\xaa\xdb\x30\x10\xbc\xeb\x2b\xe6\x90\x43\x1b\x92\x88\x5e\x03\xef\x50\xda\x77\x28\x85\xd7\x42\xdf\x0f\xe8\x59\x6b\x7b\x89\x2c\x19\x69\x1d\xd7\x08\xfd\x7b\x91\x63\x4c\xba\xa7\xd5\xec\xce\x0c\x3b\xca\x59\x1f\xd5\xdb\xaf\xf7\xd7\x2b\xbe\xf5\xc6\x77\x94\x30\x18\x4b\x90\x00\xe9\x39\x41\x68\x18\x9d\x11\x42\xea\xc3\xe4\x2c\x3e\x08\x91\x5a\x47\x8d\x90\x45\xf0\x90\x9e\xd0\x06\xe7\xc2\xcc\xbe\xdb\xb7\xd3\x09\xdc\xc2\x8c\xa3\xe3\xc6\x7c\x38\xba\xaa\x23\x9a\xc1\x6a\xd3\x91\x17\xdd\x4d\xac\xef\x4c\x73\xd2\xfb\xbe\xee\xc8\x53\x34\xee\x8f\x18\x99\xd2\x45\x86\xd1\xa9\x23\xbe\x87\xe6\x46\xb1\x65\x47\x49\x37\x6e\x4a\x42\xf1\xfc\x90\xb0\x9c\xe4\x89\xdd\x86\x38\x9b\x68\x29\x6e\x4c\x5d\xca\xcb\x5e\xea\xd5\xdb\x31\xb0\x97\xa4\x9e\x40\x95\xf3\x19\x33\x4b\x8f\x4b\x29\x0a\xa8\xcf\x58\x03\xc0\xe1\x46\xcb\x09\x87\xbb\x71\x13\xe1\xfa\xb2\xcf\x2b\x5e\x0a\xce\xf8\xfa\xfb\x07\x7e\xd2\x92\x73\x3d\xb2\x13\x7c\x72\xe4\xb7\xfd\xcf\xf8\x52\x4a\xca\x99\xbc\x2d\x05\xe4\x6d\x4d\xa5\xba\x5c\xa1\x80\xff\x5c\xd8\xfe\x3d\xe1\x60\x46\xbe\xd1\x52\x6d\x36\xc3\xd5\xac\xd6\xb9\x5a\x3e\xc6\x1b\x56\xc9\xab\xb0\x7a\xee\xd7\xce\xa5\x95\xa9\x80\xb7\x50\xf1\xc7\xbd\x60\xdf\x86\x38\x18\xe1\xe0\x2f\x78\xef\x09\x6b\x7a\x18\xcc\x52\x3f\x72\xe0\xd4\x04\xdf\x72\x37\x45\xb2\x17\xb5\x49\xae\x3a\xff\x02\x00\x00\xff\xff\xa0\xd1\x19\xf4\x17\x02\x00\x00")

func bindataEndpointsTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataEndpointsTmpl,
		"/endpoints.tmpl",
	)
}

func bindataEndpointsTmpl() (*asset, error) {
	bytes, err := bindataEndpointsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/endpoints.tmpl",
		size:        535,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataForwarderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x95\x41\x6f\xe2\x3a\x10\xc7\xef\xf9\x14\xa3\xaa\x87\xd7\x8a\x92\x7b\xa4\x1e\x0a\xe5\xe9\x55\xd5\x7b\xad\x5e\x91\xf6\x6c\xe2\x21\xb1\x9a\xd8\x59\x7b\x5c\xe4\x8d\xf8\xee\x2b\x27\x06\x4c\x08\xb4\xda\xbd\x6c\x4e\x30\xf3\xf7\x3f\xf6\xcf\x33\x93\xb6\x4d\x6f\x93\xff\x5e\x96\x8b\x0c\xe6\x25\x93\x05\x1a\xa8\x19\x47\x20\x05\x54\x0a\x03\x84\x75\x53\x31\x42\x30\xa5\xb2\x15\x87\x15\x82\xc6\x75\x85\x39\x21\x07\x25\x81\x4a\x84\xb5\xaa\x2a\xb5\x11\xb2\xd8\xab\xcd\x04\xc4\x1a\x58\xd3\x54\x22\x67\xab\x0a\xb3\xe4\x16\xf2\x9a\xa7\xac\x40\x49\x69\x61\x45\xfa\x21\x70\x63\xd2\xbd\x3e\x2d\x50\xa2\x66\xd5\x1b\x31\xb2\x66\x4a\x75\x53\x25\xb7\xe9\x76\x7b\xbf\x7b\x92\xbf\x95\xde\x30\xcd\x51\x27\x87\x58\xdb\xfa\xd7\x4c\x97\x9a\x49\xc3\x72\x12\x4a\x1a\xd8\x6e\x13\x80\x38\x92\x00\xdc\x47\x4f\x02\xd0\xb6\x77\xa0\xfd\x59\xe1\xfa\x1d\xdd\x04\xae\x3f\x58\x65\x11\xb2\xfb\x31\xab\x5e\xee\x4f\x23\x39\xfc\x25\xfb\x35\x70\xf5\x24\x1b\x4b\x33\x47\x68\x66\x6e\x21\x79\xa3\x84\xa4\xab\x9b\xa1\x60\xae\xac\xa4\x33\x82\x47\xad\x9a\x06\xf9\x99\xec\xff\xf8\xdd\xa2\xbd\x90\x26\x2d\xce\x66\xdf\x6c\x9e\xa3\x31\x63\xb1\xcb\x2b\x2e\x1d\x68\xa1\xb5\xd2\x66\x24\x34\x73\x4b\xd7\xe0\x51\xe2\x9f\xe5\xf2\x75\x44\x7f\x08\xcf\xdc\x5c\xf1\xe3\x35\x73\x25\x25\x76\xe4\x17\x1f\x28\xc9\x5c\xdd\xec\xf9\x7b\xc1\x76\x9b\x41\xdb\x96\xb6\x66\x52\xfc\xc0\x70\x67\xd1\x0d\xa1\xe4\xdd\xbf\xe1\xef\x61\x81\x4c\x03\xf7\x17\xd9\xdd\x90\xbf\xe4\xce\xe3\x1b\xd3\x52\xc8\x22\x0b\x15\x1d\x8a\x0d\x78\xaf\x06\x8a\x2c\x26\x5e\xa3\x11\x84\x81\x46\xab\x15\x5b\x55\x0e\x98\x04\x61\x8c\x45\xd8\x08\x2a\xc1\x29\xab\x41\x22\x6d\x94\x7e\xef\xdc\xff\x55\x5e\x2f\xd7\x0a\x18\x41\x49\xd4\x98\x2c\x4d\x0b\x41\xa5\x5d\x4d\x73\x55\xa7\x8f\x8c\xd8\xa3\x2a\x52\xce\x88\x71\x55\xdc\xf5\x8d\x42\x1a\x31\xad\x99\x21\xd4\x29\x57\xb9\x09\xfd\x63\xfa\x26\xa9\xf9\x57\x8e\x1b\x6e\xb6\x3f\x66\x94\x81\x90\xc0\x61\x83\xc4\x9d\x02\xb0\x54\xc4\x2a\x90\xb6\x5e\xa1\xf6\x17\x70\xce\xdc\x6b\xf7\x8e\x30\x73\xb0\xab\xa1\xac\x4b\xf5\x4f\xd4\x78\xe4\x1a\x9c\xc0\x75\xee\x1b\xe4\xa4\xf3\xa6\x27\xc5\xba\xeb\xc5\xd8\x49\xac\x77\xeb\xf7\xc9\xb6\xed\x8c\x87\xb5\xd2\xa9\x46\x1c\x76\xe0\xc6\x62\x9f\x82\xed\x0b\x19\x4e\xc1\xf6\x89\x51\xaa\x5f\x40\xda\xaf\x0e\xdb\x0a\xef\x98\x39\xf0\x2d\xf6\x4b\x28\xe3\x1e\xfd\x03\x29\x1e\x46\x42\x20\xe9\x03\xbf\x89\xf0\xe0\x19\xf6\x15\x79\x7a\x96\x7e\xf4\x64\xc9\x09\xc7\x5c\xf1\x0b\x1c\x87\xb3\x2b\x66\x79\xc4\x31\xc6\xe8\x2d\x3f\xc3\x38\x44\x38\x8e\xef\xf0\x2b\xd9\x71\x7c\x78\x7d\x7a\x46\xd7\x7f\x31\x03\xbc\x87\xd7\x27\x78\x46\x67\xa0\x1f\x11\xa7\x00\x2f\x7f\xfd\x86\x8e\xc3\xe9\x1b\x0d\xdd\xb0\x1f\x38\xde\xda\xcf\x00\x00\x00\xff\xff\xda\xb6\xaf\x8a\x4e\x08\x00\x00")

func bindataForwarderTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataForwarderTmpl,
		"/forwarder.tmpl",
	)
}

func bindataForwarderTmpl() (*asset, error) {
	bytes, err := bindataForwarderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/forwarder.tmpl",
		size:        2126,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcb\x6e\xe3\xb8\xd2\xde\xfb\x29\x0a\xc6\x2c\xa6\x83\x8e\xfc\xaf\x03\xf4\x22\x93\xa4\xff\x19\x20\x9d\x09\x26\x9e\xee\xa5\x41\x4b\x25\x89\x30\x45\xaa\xc9\x92\x1d\x8f\xe1\x77\x3f\xe0\x45\x17\xca\xb2\x9d\x39\x27\x9b\x98\xac\xaf\xee\x45\x56\x51\x87\xc3\xe2\x66\xf6\xf2\xe7\xf2\xe9\x0e\x1e\x4a\x26\x0b\x34\x50\xb1\x0c\x81\x14\x50\xc9\x0d\x10\x56\xb5\x60\x84\x60\x4a\xd5\x88\x0c\xd6\x08\x1a\x73\x81\x29\x61\x06\x4a\x02\x95\x08\xb9\x12\x42\xed\xb8\x2c\x3a\xb4\xf9\x0c\x3c\x07\x56\xd7\x82\xa7\x6c\x2d\xf0\x6e\x76\x03\x69\x95\x2d\x58\x81\x92\x16\x45\xc3\x17\x5b\x8e\x3b\xb3\xe8\xf0\x8b\x02\x25\x6a\x26\xde\x88\x51\x63\x12\xaa\x6a\x31\xbb\x59\x1c\x8f\x87\x43\xad\xb9\xa4\x47\x66\x4a\x34\x90\x10\x27\x81\x30\xff\x32\x3f\x1e\x67\x87\x83\x5f\xba\x9f\x67\x51\x33\x00\x2f\x13\x32\x46\x78\x07\x87\x03\xe4\x4a\x57\x8c\xfe\x96\xfc\x7d\xc9\x2b\xb4\xf0\x0a\x57\x92\x49\x05\xc7\xe3\x0c\xe0\xde\xda\x08\x86\x98\xa6\x49\xb8\xf3\x61\xe5\xe8\x03\xae\x57\x9e\x59\x74\x52\xf3\xcc\xad\xff\x5f\xc1\x77\xd4\x86\x2b\xe9\xb6\x0b\xb5\xda\xfa\xa5\xa3\x1e\x0e\xb7\x36\x40\x49\xbd\xa7\x52\xc9\x96\x14\x24\xb9\xbd\x88\x3b\x86\x75\x12\x50\x66\x9e\xe5\xb7\x86\x8b\x0c\x98\x4e\x4b\x07\x5f\xdb\xe5\xca\x2e\x07\x0e\xe5\x82\x6d\x95\x76\x74\xff\x33\x32\x44\x37\x52\xa2\xb6\x91\x32\xc9\x0f\xa5\x37\xa8\x8d\xa3\x3f\x94\x98\x6e\xe0\x2f\x47\x35\x8e\xf9\x1c\x32\x32\xa8\x15\x9b\x2a\x99\xf3\x22\x11\xaa\x58\xe5\xdc\xa5\x0a\xe0\x59\x15\xf0\x95\x0b\x97\x8b\x49\x40\x24\xc9\xa2\x9f\x71\x8b\x62\x0c\x17\x76\xd3\x27\xf8\x95\x51\x69\x66\x00\x5f\xec\xdf\x0c\x00\xe0\xc1\xe1\x3a\x35\xad\x29\x41\x47\x10\xd4\xad\x50\x18\x3c\x1e\x97\x25\x6a\x04\x6e\x40\x2a\xf0\x7a\xc0\x02\x0e\x07\x94\x3e\xa5\xe0\xb6\x93\x6c\x68\x89\xfd\x97\xad\x6a\x46\x65\x80\x8c\x3c\x67\x59\xc6\x89\x2b\xc9\xc4\x2a\xb5\xa1\x34\xc1\x2d\x00\xbf\x8c\xa5\x9d\xa2\x07\x52\x43\x48\x6c\x52\x84\x4a\x37\x9d\xc3\x5f\x22\xbd\x92\xea\x3f\xf3\xdc\x20\xb5\x7a\x5e\x96\xaf\xa0\xdc\x8e\xab\xe6\xb2\xa9\x98\xe4\xff\xe0\x63\xa3\x99\x55\x35\xe4\x98\x9b\x79\xec\x85\xa4\xfa\x07\xd3\xd2\x9e\xec\x1e\xd6\x41\xf6\x68\x8f\xfd\x12\xdf\x09\xe6\xbd\x16\x1b\xc1\x92\x17\x65\x02\x8f\x8c\x58\xa6\x0a\xa8\xd8\x1e\x78\x21\x95\x46\xa8\x90\x34\x4f\x0d\x18\x5b\x91\xeb\xbd\xbf\x62\x5c\x7d\x26\xf3\x53\x57\x27\x96\x6f\x7b\x43\x58\x81\x3d\xb2\xd7\xcf\xf2\xac\x0d\x4a\xa9\x0c\x71\x99\xab\x10\xbf\xdf\x95\x21\xf8\x43\xe6\xaa\x0b\xa1\x8f\xa2\x85\x6b\x7b\x07\xc2\x2f\x92\x55\xf8\x19\x7e\xd9\x32\xd1\x20\xdc\x7d\x19\x88\xb8\x8d\x43\xc4\x64\x06\xbf\xca\xc0\x01\x73\x0b\xb3\xbf\xe6\x9f\xc6\xbb\x3c\xb3\x7b\x5e\xe2\xa7\xde\x3b\x87\x38\x1e\x43\x95\xe2\xcf\x96\x65\xad\x14\x59\x97\xe6\x60\x2b\x74\xec\x67\x30\xcc\x91\x6c\xf5\xba\x5f\x11\x7f\x53\x53\xcf\x7d\x92\xf4\xc0\xef\x12\x3e\x14\x11\x0b\x76\x61\xef\x7e\x9c\xa6\x63\xb0\x88\x0b\xf4\xf7\x10\x05\xf3\x2f\x02\x5c\x21\xb1\x8c\x11\x73\x3f\xae\x44\xd9\xba\xf6\x8f\x92\x68\xae\x85\xd4\xd3\xae\xd8\xde\x1f\x1e\x9b\xa7\x25\x2b\x4c\xb4\x5b\x10\xfc\x2a\x50\xf6\xd4\x4f\xf0\x7f\xad\x32\xbb\x05\xc4\x0a\x73\xd7\x69\x08\xfe\x11\x2b\xba\xba\xb1\x4c\x81\xc1\xd9\x47\xac\xf8\x90\x49\x83\xb8\xb7\x75\x05\xb5\x56\x5b\x9e\xa1\xbf\xc8\xdb\x5d\x7f\x1b\xb7\xa4\xb3\xc6\xf7\x50\xd4\x5a\xe9\xa1\x23\x8d\x6c\x0c\x66\xa7\x6a\x9c\x63\x27\x86\x5d\x3a\x24\x63\x25\x5d\x2a\xfb\x5b\xa5\xcb\x23\x13\x62\x0e\xc3\xc8\x9c\xc9\x5c\x67\xc2\xe5\xd4\x8d\x55\x27\x4c\x88\x56\xbc\xdb\x99\x08\x5a\x8f\x1c\xcb\x9e\x01\x7c\x0b\x35\x39\x28\xe3\x38\x02\x1b\xdc\x47\x01\xf0\xb3\x41\x5b\xca\x7d\x49\x3a\x24\x78\xcf\xfa\x33\x76\xa2\xaf\x75\x66\xa9\x99\x34\xb5\xd2\x14\x6e\x5f\x13\xe8\xdd\x3e\xbc\x6a\xf5\xbe\x87\x96\x3c\x3c\x66\xa3\x3f\x67\xc0\xb2\xb4\x53\xdb\xcf\x06\x0d\x19\x3f\xd9\x0d\x87\x36\x1b\x10\x03\x8d\x41\x60\x36\xef\xef\x7b\xb8\x85\x75\x43\xb0\xe3\x42\xb4\x17\xb7\xe5\xf0\x34\x2e\x21\x6f\xa8\xd1\x18\xe6\x8a\x30\x94\x18\x58\x33\xd3\x8f\x84\x52\xad\x3c\xdc\x20\x11\x97\x45\xe2\xec\x78\x92\x76\x18\xf4\x00\xdc\xc1\x1a\x4b\xb6\xe5\x4a\x83\x54\x3b\xd8\x71\x2a\x3b\xb6\x95\x54\x12\xdf\x59\x4a\xab\x8a\x91\x9d\x6a\x48\x37\x38\x3e\x62\xe3\xe0\x4f\x46\xad\x2d\x9f\x36\x03\x17\x8f\x5d\xdf\x31\x04\xb2\x0c\x35\xda\x39\xd7\x4f\x5c\xb3\x67\xb7\x03\x4f\x61\x6b\x76\x1a\xe7\x11\x22\xcc\x9d\x77\x56\xc3\x48\x5e\x62\x1c\x69\x58\xc0\xf8\x73\xac\x34\x80\x60\xfe\x95\x71\xc1\x65\xe1\x1b\xe4\x53\x57\xc7\x23\xb4\x2b\xe4\x20\xd1\x0f\x34\xbd\x49\x2f\xf6\xb4\x71\x33\xc5\xe6\x97\x2f\xee\xdc\x59\x06\x66\x08\xee\xd3\x9f\x0d\x37\x6e\x12\x01\x95\xbb\x74\x09\x64\x06\xa7\xf8\x99\xc5\x6a\xcc\x6c\x5b\x72\x12\xfe\x42\x89\x3b\xcc\xc0\xe3\x4c\xc9\xeb\x29\x36\xed\x51\x1d\xd7\x4b\x53\xad\x51\x5b\x6d\x1e\x08\x64\x93\xe9\x4c\x98\x34\x7b\x40\x1e\x26\xb1\xef\x44\xc3\xf6\x9f\x36\x86\x54\xd5\xce\x1e\x96\xf2\xe0\x76\xec\xf9\x76\x5b\x6f\xa8\xb7\xa8\xc7\x29\x8d\x0e\xfc\x89\x9c\xc4\x65\x02\xe2\xa4\x5c\xc0\xf4\x6d\xf6\xac\xc4\x47\x6e\xec\xf9\x08\x75\xd9\xae\xa6\xe4\xc6\xc8\x0f\x88\x7e\x51\xe1\x15\xd4\x32\x5c\xa3\xf7\x02\xfd\x2c\xfd\x8d\xd5\x60\x6f\xcd\x29\x6b\x1e\x2a\x77\x9d\x5f\x50\xff\x46\x4a\xe3\x47\x02\x36\x06\x46\x96\x3c\xbd\x13\x6a\xc9\x44\x9b\xb7\x19\xc0\xed\xe8\x2f\x9e\xc1\xe3\x5c\x04\xee\xe4\x99\x1b\x1a\xa8\xb8\x94\xbe\xb3\x2c\x91\x5d\x00\x4b\x45\x4c\x5c\x94\xe0\x10\x2d\xfc\x3b\x13\x7c\x32\xaf\x1d\xdc\x21\x06\xca\xc2\x95\xe7\x71\xee\xb6\x3b\xc3\xf8\xad\xaf\x72\x80\x1b\xdb\x48\x3d\x24\xd1\x98\xa3\x46\x99\x62\x42\xfb\x1a\x8f\x47\xa8\x55\x06\xac\x21\x65\x52\x26\xfc\x3c\x71\x0a\x75\x43\x5c\xcd\x52\x3c\x1e\x17\xe7\xe8\xc1\x48\xaf\xb8\xab\x91\x16\xeb\xff\xbd\xf4\xb8\x67\xb6\x46\x71\x3a\x2f\x6d\xec\x55\x6e\x1d\x6b\x19\x85\xc3\xb5\x21\xb8\xb5\x22\x37\xed\x68\x30\xfd\x36\xf8\x6e\x3b\x41\xf4\xc8\xe9\x84\x0d\x87\x09\x7b\xe7\x18\x62\x55\x3d\xf5\x80\x68\x19\xc8\x8c\x53\x35\x10\xc5\x27\x9e\x65\xff\x62\x9a\xfb\xc8\x0c\xdd\x95\xb0\x68\x0c\xa1\xf6\xaf\x41\x7f\x75\xf9\x1d\xff\x32\x37\xf6\x96\xa8\x6d\x8b\xe4\xb2\x98\xbe\xbf\xfc\x25\x36\x29\x2f\x09\xed\x21\x3e\xb8\x11\xe2\x3e\x25\xbe\x0d\x65\xde\xf6\x33\xcf\xf5\x19\x0c\xea\xad\x9d\x1f\xda\xc9\x62\x06\x10\xe0\x52\x65\x68\x42\x7d\x47\xe2\x5e\x54\x86\x0f\xaa\x91\xe1\x75\xea\xbf\x2e\xf8\x0b\x26\x3c\x4d\x26\xd9\xdc\xe1\xf1\xb0\x41\x45\xb4\xae\x77\x57\xe4\x84\xe5\x27\x4c\x7f\x4b\x66\x0c\x2f\xe4\x34\xd3\x23\x93\x85\xed\xb5\x11\x9b\xcb\x4b\x77\xd8\xc7\x51\xd8\x31\x5d\xd9\x28\x34\xf5\x44\x36\x2d\xd7\x69\x50\xbf\xba\xd1\xcb\x07\xfe\x52\x62\xfe\x78\x8d\x55\xb6\x7c\x9f\x41\x63\xc6\xb5\x6d\x85\xb2\xb0\xf3\x5c\xe8\x99\x8c\x26\x5c\x8a\x45\x4d\xfb\xd2\x0b\x96\x9d\xb0\x5c\x35\x32\x3b\xe3\x52\xc4\xdc\xc8\x8d\x54\x3b\x39\xbb\x52\xc9\x2c\xab\xb8\xb1\x93\xe2\x0f\x5c\x97\x4a\x6d\x1c\xf1\xbe\xdd\xb4\x45\x40\x5a\x09\x71\xa6\x0d\x0f\x0a\x74\x2c\xe8\x4c\x23\xbe\x04\x9b\x6c\x98\x27\x0c\x97\xda\xf1\x15\xf0\x48\xc1\xb4\xfc\xf0\x7f\x60\xd7\xb7\x86\x98\xcd\x69\xa0\xc4\x07\x63\xd0\x7e\xcf\x89\x7a\xe9\xda\xf0\xa5\x40\x9c\xea\x9d\x7c\x51\x9d\xe3\xeb\x0e\x53\xb7\xe6\xfe\x53\xca\xa8\x1b\x87\xd1\xfb\x7f\xf5\xc9\x24\xbd\x57\xee\xd3\x9e\x46\x46\x98\x01\xa3\x6b\x7c\x01\x79\x4f\xe1\xf5\x34\xea\x38\xe1\xf5\x1a\x3e\xf5\xb9\xd7\xdb\x59\x51\x63\xd7\x07\xae\x86\x35\xb8\x21\xdb\xbf\xef\x64\x64\xf0\x99\x36\x17\xf4\x46\xb0\x93\x0e\x37\xd1\x64\x2e\x37\x93\xe9\xcc\xbd\x61\xaa\x71\x38\xc0\xf8\x8d\x4b\xd1\xf7\x88\x8f\x15\xd4\x89\xf8\x8f\xd5\x53\x30\xa2\xfd\xb2\xe7\x57\x53\xb5\x34\xa4\x5f\x35\x39\x2a\x97\x01\x93\x1b\x63\xae\x73\x3a\x58\xcb\x7e\xb5\xd6\x02\x63\x54\x69\x8e\xf1\x1e\xd6\x8d\xcc\x04\x42\xc6\x0b\x34\xd7\xd8\xef\x7f\x73\xe0\x47\x87\x6d\x65\x74\x1f\xeb\xd6\x98\xdb\x27\x78\x8a\x9a\x78\xce\x53\x46\x08\xf8\x5e\x73\x4f\xbd\x22\x19\x35\xb9\x09\xa6\x13\xf6\x5f\x8d\x23\x87\xc3\xe2\xc6\x7f\xab\x15\x5c\x22\x70\x49\x28\xfd\x77\x6a\xb1\x07\x81\x39\xc1\x5a\x30\xb9\x81\x9b\xc5\xf1\x38\xfb\x4f\x00\x00\x00\xff\xff\x57\x5c\xad\x14\x52\x1a\x00\x00")

func bindataHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataHeaderTmpl,
		"/header.tmpl",
	)
}

func bindataHeaderTmpl() (*asset, error) {
	bytes, err := bindataHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/header.tmpl",
		size:        6738,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1614857307, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataJmxfetchTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x8f\xda\x30\x10\x85\xef\xf9\x15\xef\xc0\xa1\x8b\xd8\xe4\x8e\xc4\xa9\xdd\x95\x8a\x4a\x7b\x60\x2b\x71\xab\xbc\xc9\x84\x58\x38\x76\x14\x0f\x50\xd5\xca\x7f\xaf\xec\xc4\x90\x2d\x44\xed\xa5\xd2\xe6\x64\x4f\xe6\xbd\x99\xf9\xc6\xce\x65\xf3\xe4\xeb\xb7\x97\xa7\x25\x3e\x56\x42\xef\xc9\xa2\x16\x05\x81\x0d\xb8\x92\x16\x4c\x75\xa3\x04\x13\x6c\x65\x8e\xaa\xc0\x2b\xa1\xa5\x52\x51\xce\x54\xc0\x68\x70\x45\x28\x8d\x52\xe6\x2c\xf5\xfe\x92\x6d\x17\x90\x25\x44\xd3\x28\x99\x8b\x57\x45\xcb\x64\x8e\xbc\x2e\x32\xb1\x27\xcd\xd9\xfe\x28\xb3\x93\xa4\xb3\xcd\x2e\xf9\xd9\x9e\x34\xb5\x42\x6d\x59\xf0\xd1\xa6\x5c\x37\x2a\x99\x67\x5d\xb7\x1a\xbe\x64\xbd\xd9\x3d\x13\xe7\x55\x72\x89\x38\xe7\x6b\xa4\xeb\xcd\x6e\xcb\xa2\xe5\x63\xf3\xd4\xb6\xa6\x4d\xbf\x08\xcb\xe1\x84\xae\x4b\x80\xf5\x66\x07\xdb\xff\x07\xf9\xb0\x4d\x80\xd5\xcd\x97\x00\x40\x90\x2d\xe1\xdc\x5f\x5d\x81\x4f\x82\x29\xa4\x96\xa6\xad\x05\x7f\xd7\xf2\xe7\x8b\xac\xe9\x56\xe9\xa3\x96\x45\xdd\x78\xa5\x73\x20\x5d\xe0\xb1\x3f\x9e\x25\x57\x51\xc0\x47\xdb\x5b\x7f\xd6\xbd\xa3\x34\x7a\xaa\x53\xe7\x1e\xd1\xfa\x5d\x61\x76\x58\xcc\x4e\x58\xae\x90\x4a\x5d\x9a\xd8\x9b\x73\x98\x1d\xd0\x75\x08\x0d\xce\x4e\x7d\xdc\xab\x7c\xf1\xcb\xc5\xd3\xeb\x91\x44\xe1\xd6\xe4\x07\xe2\x81\x53\x0f\x62\x9c\x70\xcf\x41\xe8\x02\x1f\xb4\x61\xa4\x1c\x07\x7d\x18\x02\x79\x45\xf9\xc1\x3e\xf4\xe9\xda\xc4\x55\xf8\x49\xc5\x49\x48\xe5\x1f\x46\x74\x55\x96\xe2\xf8\x92\xa5\x50\xf2\x17\x15\xe8\x0d\xa6\xf7\x35\xb4\x30\xae\x96\xca\xab\xfe\xc7\xd0\xc0\x30\x9c\x36\x57\xc3\xc0\xe8\x5a\x34\x9a\x0d\x50\x43\xda\x62\x26\xb5\x65\xa1\x73\xb2\x01\xf0\xa4\xff\x98\x7a\x88\x84\xf5\x02\x37\xb6\xd1\xcf\xdb\x8d\xcc\x47\xc9\x77\x57\x7b\xd5\x8d\x7a\xbd\xb7\xe0\xb1\x47\x7c\x65\xd3\xb1\x37\xcb\xfc\xe3\xfa\x2c\xa4\x9a\xe4\x3f\x89\xbe\x0c\xaa\xff\x42\xfd\x8d\xf5\x2d\xf0\xf7\xc1\xfb\x0e\xee\x7f\xa2\x3d\xba\x8c\x8e\xbf\x03\x00\x00\xff\xff\x33\xa7\x4a\x02\x99\x05\x00\x00")

func bindataJmxfetchTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataJmxfetchTmpl,
		"/jmxfetch.tmpl",
	)
}

func bindataJmxfetchTmpl() (*asset, error) {
	bytes, err := bindataJmxfetchTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/jmxfetch.tmpl",
		size:        1433,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataLogsagentTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x8e\xdb\x36\x10\xbd\xfb\x2b\x06\x46\x0e\xd9\xc5\xae\xdd\x16\xed\xc5\xc0\x1e\xd2\x24\x40\x0b\x04\xed\xa2\x31\x50\xf4\x24\xd0\xd4\x93\x44\x98\x22\x55\x72\x64\x47\x30\xf4\xef\x05\x49\x49\xd6\x66\xb5\x9b\x74\x2f\x4b\xce\xbc\x37\xf3\x86\x7c\xb4\x2e\x97\x7b\xda\xde\xae\xfe\xf8\x73\xff\x71\x47\xef\x2b\x61\x4a\x78\xaa\x45\x0e\x62\x4b\x5c\x29\x4f\x8c\xba\xd1\x82\x41\xbe\xb2\xad\xce\xe9\x00\x72\x28\x34\x24\x23\x27\x6b\x88\x2b\x50\x61\xb5\xb6\x67\x65\xca\x09\xed\xef\x48\x15\x24\x9a\x46\x2b\x29\x0e\x1a\xbb\xd5\x2d\xc9\x3a\xdf\x8a\x12\x86\xb7\x65\xab\xb6\x27\x85\xb3\xdf\x4e\xf8\x6d\x09\x03\x27\xf4\x67\x16\xdc\xfa\x0d\xd7\x8d\x5e\xdd\x6e\xe9\xbe\xef\x57\x0f\xd3\xdf\xea\x93\x2d\x3d\xbd\x0b\x35\xe6\xd1\xcb\x45\x15\x84\x7f\x69\xa3\x7c\xe6\x5a\x63\x82\x90\x42\x68\x0f\xea\xfb\xd5\x8a\xe8\xca\x22\xe5\xc9\x58\xa6\x01\xb5\x0a\xe3\xc3\xe4\x11\x17\xd6\xaa\xa0\x0d\x4c\xde\x58\x65\xd8\x0f\xec\x10\x77\xe1\x60\xe8\xcd\x98\xa2\xdd\xc3\x57\x38\xa2\x00\x9c\x21\x62\x6c\x56\x7e\xa1\x93\x30\x39\xbd\x0d\xb2\x5b\x8f\xac\x62\x6e\x92\xe8\x9b\x14\x9c\xcd\xc2\xae\xc5\xcd\xa0\x86\xe8\x1f\xdb\x92\x70\x20\xd9\x3a\x07\xc3\xba\x23\x0f\x93\x07\x5c\x9c\x93\x2d\x7d\x10\x2c\x72\x5b\x12\x57\xce\xb6\x65\x45\xfb\xf7\x8f\xf4\x16\x8a\x2b\x38\x3a\x40\x8a\xd6\x83\xb4\x2d\x7d\x26\xad\x29\x54\x19\xfb\xb3\x6c\xc8\xba\x27\x61\x6f\xe5\xd1\xff\x92\x35\xce\x7e\xe9\x32\x91\xe7\x0e\xde\x87\x03\xf4\xe0\x00\x0d\x17\xff\xdb\x7e\xff\x48\xd2\x1a\x03\xc9\xea\xa4\xb8\x23\x86\x67\xaa\x84\xa7\x42\x28\x8d\xfc\x66\x43\x7b\x4b\x07\x18\x14\x8a\xa9\x70\xb6\x26\x65\xa4\x83\xf0\xc8\xc9\x41\x2b\x71\x50\x3a\xf0\xc2\x61\x1c\xc0\x0c\x47\x06\x7c\xb6\xee\x48\x0d\x5c\x61\x5d\x2d\x8c\x0c\x76\x3a\x83\x3c\x3b\x6b\x4a\xdd\x11\x8c\xb4\xad\x13\x25\xc8\x9f\x15\xcb\x2a\x0c\x6f\x4f\x70\x61\x78\x69\xeb\x26\x28\x45\x1e\xd5\x7d\xa6\x73\xa5\x64\x95\x2e\xfe\x1c\x45\xe7\x28\x44\xab\x99\x1a\x67\xd9\x4a\xab\x37\xab\xcb\xe5\x99\x0b\x6a\xb0\x53\x72\xc1\x03\x29\x91\x19\x51\xe3\x6e\xda\x9d\x84\x6e\x11\x5d\x31\xe3\x25\x4f\xcc\x09\x7d\xbf\x9b\x45\x22\xe9\x3b\x7c\xb2\x81\x73\xd6\x8d\x52\x3e\xc6\x4d\x24\x51\xe3\x94\xe1\x0f\xc2\x57\xf0\xb4\x4e\x89\x35\xad\x1f\xd6\x57\xf7\x8d\xc6\x0d\xb9\xe4\xda\xa9\xd6\x64\xd9\x98\xfb\x1e\x1d\x67\xe1\x82\x1f\x47\x25\x7f\x0f\xdb\x05\x2d\x23\x72\x59\xcd\x90\x8d\x7a\xe6\x35\x47\x45\x63\xfe\x5b\x9a\x52\xb9\x8d\x32\x8c\xd2\x09\x56\xd6\x5c\xef\x8b\x36\xe1\xc0\xc7\x12\x4f\xd4\xa5\xcc\xfa\xfe\x99\xb0\x8d\xb7\xad\x93\x98\xb4\xdc\xd3\xbe\x6b\xb0\x8b\xd5\xb8\x6b\x30\xc6\x9f\x0c\x73\x44\x77\x47\x6f\xae\x06\x48\x8f\xa7\x4d\x7a\xe6\x8c\x80\x1c\x0c\x70\xbd\xf9\xb1\xd8\x30\x56\x0a\xa4\xdf\xc0\xd4\xd7\xc7\xf5\x62\xe7\x1a\xde\x87\x37\x90\x6c\x17\xd7\x33\x60\x3a\xca\x11\xf3\x72\xb3\xf1\x72\x95\x69\x5a\x9e\xf1\x7f\x8f\xfb\x28\x62\xe8\x17\x11\xb1\xdb\x84\xbd\x5c\x52\xb4\xef\xe9\xfa\x86\x5e\x68\xf4\x6b\xc7\xf0\x7f\x41\xe4\x69\xb0\x43\xd8\x66\x0e\x62\x06\x79\x77\x42\x7c\xd5\x9f\x04\xc3\xc8\x8e\xde\xd6\xfe\x26\xa1\x85\xd6\x19\xab\x1a\x99\x38\x95\x99\x1e\xd2\x13\xef\xa7\x9f\xab\x57\xb8\x0e\x12\x86\x97\x99\x8f\x10\xc7\xd7\xda\x35\x10\xc7\xe5\x7e\x2f\x30\x87\x66\xcb\xbc\xeb\x59\x17\x96\xfa\x9e\xbe\xed\xa6\x11\x19\xee\x52\xc3\x84\x58\xf8\x37\x20\x52\x22\x7d\xfc\x62\xfa\xc7\x65\xc3\x29\x93\xe3\xcb\x48\xfa\x61\xb8\xac\xe1\xfb\xf8\x15\xfa\xb9\x24\x65\x8a\xd0\x76\x6a\xf9\xc4\x5f\x21\xf9\xba\xb7\xfe\x47\xe0\x85\xa7\xfe\x5f\x00\x00\x00\xff\xff\x36\x36\xba\x4f\xa4\x08\x00\x00")

func bindataLogsagentTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataLogsagentTmpl,
		"/logsagent.tmpl",
	)
}

func bindataLogsagentTmpl() (*asset, error) {
	bytes, err := bindataLogsagentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/logsagent.tmpl",
		size:        2212,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1617780603, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataMetadatamapperTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x39\xf8\x18\xf7\x01\x0c\x39\x95\xde\x9a\x50\x28\xa5\xc7\x22\xac\x6d\x6a\x88\x25\xa1\xdd\x84\x16\xa1\x77\x2f\xfa\x71\xec\x16\x4a\x7d\x5a\x7b\x66\xbe\x1d\xef\xfe\xe7\xa3\x0e\x24\xda\x68\xd1\x38\x68\xef\x29\xa8\xdf\x7a\x8c\x3d\xa6\x77\xdc\x3d\x84\xe0\x02\x23\x25\xa5\xee\xdd\xe5\x6c\x60\x9d\x20\x5c\x2c\xe4\x83\xc0\x14\xae\xd3\x48\x98\x0b\x63\x40\x8c\xcd\x9f\x92\x8a\x91\xce\x4c\x65\x28\xa0\x57\x1d\xec\x64\x4f\x8c\x3e\x25\xb5\xbc\x0c\x65\x4f\xd0\xf6\x44\xab\x23\x25\x05\xa0\xcf\xb4\x1a\x27\x6b\x4a\x2a\x7b\xb7\x73\xc6\x1e\x9d\xa1\x52\x6f\x05\x75\x93\x35\xf4\xb9\x43\x37\x93\xe8\x37\xf9\xf2\x84\x61\xbf\x71\xe6\x01\x86\x84\x46\x21\x93\x4b\xb7\xc4\x8d\xdb\x30\x73\x8e\x6d\x20\xa5\x57\x8c\x8b\x6c\x79\x87\xce\x3b\xc3\xd5\x56\xe5\x1e\x47\x3d\x13\x7b\x3d\x52\x25\xdb\xfa\xc3\x40\x8e\xde\xd0\xde\x99\x1d\x3a\xbe\x8e\x35\x5c\x28\xcd\x95\x19\x4f\xae\xf5\xf2\xce\xac\xdf\x81\xe7\x7a\x6f\x2e\xa2\xb8\x17\xcb\x2e\x08\x99\xc7\x89\xa5\xd1\xd6\x5d\xe5\x52\x4b\xe5\xbf\x2e\xf8\xdf\xfc\x1d\x00\x00\xff\xff\x14\x40\xfd\xfe\x36\x02\x00\x00")

func bindataMetadatamapperTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataMetadatamapperTmpl,
		"/metadatamapper.tmpl",
	)
}

func bindataMetadatamapperTmpl() (*asset, error) {
	bytes, err := bindataMetadatamapperTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/metadatamapper.tmpl",
		size:        566,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataOrchestratorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x96\xcb\x6e\xdb\x3c\x14\x84\xf7\x7e\x8a\x59\x64\x11\x07\xb9\xfc\xff\xd6\x40\x16\x45\x9d\xa2\x41\xd3\x34\x88\xfb\x02\xb4\x74\x6c\x13\xa1\x49\x83\xa4\x93\x18\xaa\xde\xbd\xe0\x45\x32\xa5\x30\x84\xeb\x15\xc5\x33\x33\xe7\x13\xc9\x50\x69\x9a\x9b\x8b\xc9\xc5\x4d\xdb\xde\xe6\x7e\x93\x5f\xba\xda\x90\xb1\x9a\x59\xa5\x71\xf7\xbe\x13\x4a\x93\x9e\xe4\xb5\x93\xa6\xb9\x02\x5f\xe1\xfa\x4e\x6b\xa5\xd1\xb6\x13\xc0\x0f\x67\x68\x9a\x64\xd6\xc9\x48\xd6\xdd\xd0\x39\xe6\xdc\xb0\xa5\xa0\x3a\x98\xba\xa7\xe0\x4b\x6b\x19\xeb\x57\xb1\x37\x96\xf4\xfd\x3c\xe9\x1a\xe7\x70\x3f\x07\x75\x00\x23\xe1\x30\xec\x63\xda\x38\x68\x18\x51\x44\x79\x64\x5b\x3a\x11\xa6\x97\x96\x71\x9c\x6c\x18\x26\xd9\x96\xc6\x41\x9f\x40\x29\x69\x19\x97\xa4\x17\x95\xde\x2f\x97\x5c\xae\x43\x92\xf3\x7e\x28\x1d\x23\x8e\x09\x4c\xd6\x38\x97\xca\xc6\x1d\x9c\xc6\x87\x6e\x5b\xa6\xa1\xd9\xcd\x05\xec\x86\x1b\x08\x2e\x09\x5c\x5a\x92\x96\x2b\xc9\x84\x38\x40\xd0\xca\x62\x29\x98\x7c\x81\x3b\x68\x13\x20\x7b\x7e\x6e\x27\xc0\xf0\xb8\xc9\x7a\xa7\xb8\xb4\xa6\xe4\x70\x90\x9a\xc9\x35\xe1\xec\x85\x0e\x97\x38\x7b\x65\x62\x4f\x06\xb3\x5b\x5c\xa7\x69\x7d\x58\x7c\x79\xff\x6a\x6b\x8b\x73\x41\xb2\x33\x4d\xf1\x7f\xac\xba\xac\xb6\xc5\x15\xbe\x3c\xdd\xe3\x07\x1d\x8c\x5b\x12\xb7\x74\x6f\xdc\x6e\x66\xc3\xb6\xb1\xa1\x77\xba\xdf\x95\x3f\xb5\xe8\xfb\x84\xc5\x8c\x63\x61\xe8\x93\x16\x83\x0e\x68\x1a\x2e\x6b\x7a\xef\xd3\xff\xcb\xc7\xf9\x71\xbf\xd5\x0f\xc4\x6a\xd2\xc9\xd1\x03\xc2\x14\x48\x50\xe5\xf6\xa3\xfc\xe7\x10\xe9\xfe\x69\x33\x87\xbd\x31\xde\x5e\x77\x64\x59\xb5\x21\x2c\x2c\x1b\x6f\xa4\x07\xbc\x13\xb4\x25\x69\x0d\xb8\x84\xdd\x10\x2a\xa7\x0e\x80\x6e\xf4\xb8\xdf\x2e\x49\xc7\x97\x79\x52\xb5\x99\xc5\x55\x7e\x60\xc6\xe2\x79\x2f\x67\x38\xff\xce\xad\xf1\x0e\x57\xf7\x7d\x82\xd7\xcd\xb7\x2d\x7e\x72\x93\x2d\xbb\xf9\xb6\x9d\xe2\x0f\x7e\x2b\xcb\x44\x1a\xd4\xdb\xbd\x27\xcd\xe8\x9d\xb1\x32\xf5\x38\x73\xda\x09\x75\xf0\xef\x51\xe2\x4b\x64\x05\xcc\xbc\xea\x24\xda\xc4\x9a\x87\x1e\x08\x02\xfb\x33\xed\x04\xaf\xd8\x82\xca\xec\x89\xac\xc0\x9e\x57\x9d\xc4\x9e\x58\xf3\xec\x03\x41\x60\x5f\x90\x7e\xe5\x15\x15\xc1\x3b\x4d\x81\x3a\x23\x39\x09\xb9\xf3\xe5\x79\x8f\xd5\x00\xfb\xa8\xea\x32\xa9\x17\x14\x30\xc7\xf5\x93\x18\xbd\x29\x0f\x18\x4b\x81\x2e\x5e\x07\x25\xbe\x28\x29\x21\x66\x24\x27\x51\x76\xbe\x3c\xe8\xb1\x3a\x4d\x6f\xa9\xf4\xe2\x39\x7e\x21\x5d\xeb\xbd\x99\xe1\x9b\x12\x42\xbd\x91\xbe\x44\x15\xbf\x99\x6c\x4d\xd2\x42\x84\x8b\x8a\x9b\xf0\xdf\xc5\xd0\xde\xa7\x7f\xbc\x39\xb9\xc4\x4e\xab\xb5\x26\x63\x2e\x61\x88\x50\x53\xcd\x2b\x66\xa9\x86\x89\x92\x95\xd2\xd8\x2a\xed\xae\xcc\x95\x1a\x7d\x48\x3f\x1f\xfd\x0d\x00\x00\xff\xff\xd5\xcb\xe6\x63\x82\x09\x00\x00")

func bindataOrchestratorTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataOrchestratorTmpl,
		"/orchestrator.tmpl",
	)
}

func bindataOrchestratorTmpl() (*asset, error) {
	bytes, err := bindataOrchestratorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/orchestrator.tmpl",
		size:        2434,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1617780603, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataRuntimesecurityTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xc1\x0a\xc2\x30\x10\x44\xef\xfb\x15\xfb\x03\xf6\x03\x04\x4f\xe2\xd5\x43\xfb\x05\x35\x19\x71\xa1\x6e\xa0\xd9\x54\x24\xe4\xdf\xa5\x21\x15\xf1\xd0\x3d\xed\xcc\xbc\x61\xfa\xa4\x26\x4f\xf0\x00\x97\x66\xb1\x37\x9d\xfe\x8e\x28\xe7\x03\xcb\x9d\x35\x18\x77\x0d\xdf\xe8\xc1\x46\x4b\xb1\x14\x62\xbe\x06\x63\xe8\x78\x9b\xe0\x6b\x03\x53\x44\x0d\x56\xf1\x12\x7b\xec\x95\xcf\x41\x15\xce\xe0\x8f\x9c\x73\xe7\x36\x55\xb3\xcb\x02\xb5\xc8\x33\x1c\x64\x69\x04\x56\xaf\x6f\xce\x77\x05\xea\xb9\x14\xfa\x79\xe9\x13\x00\x00\xff\xff\x14\x21\x75\xe9\xdf\x00\x00\x00")

func bindataRuntimesecurityTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataRuntimesecurityTmpl,
		"/runtimesecurity.tmpl",
	)
}

func bindataRuntimesecurityTmpl() (*asset, error) {
	bytes, err := bindataRuntimesecurityTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/runtimesecurity.tmpl",
		size:        223,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSnmptrapsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4d\x6a\xc3\x30\x10\x85\xf7\x3a\xc5\x5b\x64\x65\x52\x6b\x6f\xc8\xaa\x64\xd9\xb4\x10\x5f\x60\x62\x8f\x6d\x51\xfd\x18\x69\x9c\xd0\x0a\xdd\xbd\x38\x09\xa6\x99\xd5\xe3\xf1\xcd\x37\x4c\xce\xba\x52\xa7\xcf\xf6\xd8\xe0\x7d\x22\x3f\x72\x82\xa3\x9e\x21\x01\x32\x99\x04\x61\x37\x5b\x12\x46\x9a\xc2\x62\x7b\x5c\x18\x91\x07\xcb\x9d\x70\x8f\xe0\x21\x13\x63\x08\xd6\x86\x9b\xf1\xe3\x46\xa7\x3d\xcc\x00\x9a\x67\x6b\x3a\xba\x58\x6e\x54\x85\xce\xf5\x9a\x46\xf6\xa2\xc7\xc5\xe8\xab\xe1\x5b\xd2\x1b\xaf\x47\xf6\x1c\xc9\x9e\x85\x64\x49\xb5\xb8\xd9\xaa\x4a\x97\xa2\x0e\xdb\xa8\xf3\xe9\xe3\x0b\x6d\xa4\x39\xfd\x6f\x73\x7e\x5b\x6f\xd5\x1c\x63\x88\x28\x45\x01\xc7\x35\x36\xc8\xf9\x51\x96\x72\x87\xd8\xf7\x78\xc6\xb8\x3e\x8a\xdd\x37\xff\xec\xb1\xbb\x92\x5d\x18\xcd\x01\xb5\x63\x89\xa6\x4b\x77\x47\xce\x43\x88\x8e\xa4\x35\x62\x1f\x68\x29\xab\x72\x5a\x1c\x79\xf3\xcb\xcf\xbd\x57\xf7\x5f\x00\x00\x00\xff\xff\xc7\xc0\xf8\x4e\x4d\x01\x00\x00")

func bindataSnmptrapsTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataSnmptrapsTmpl,
		"/snmp-traps.tmpl",
	)
}

func bindataSnmptrapsTmpl() (*asset, error) {
	bytes, err := bindataSnmptrapsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/snmp-traps.tmpl",
		size:        333,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataSystemprobeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6b\xf3\x30\x18\x84\x77\xfd\x8a\xc3\x63\xf8\x3e\x6b\x37\x64\x4a\xb3\xb6\x85\x74\x2f\x8a\x7d\xb1\x45\xe5\x57\x46\x7a\xdd\x50\x8c\xff\x7b\x89\x1d\x82\xdb\xa9\x9a\x24\xee\xb9\x7b\x34\x4d\x76\x67\x9e\x5f\xde\x8e\x15\x0e\x9d\x93\x96\x19\xbd\x6b\x08\x8d\xd0\xce\x67\x28\xfb\x21\x38\x25\x72\x17\xc7\xd0\xe0\x4c\x24\x5e\x02\x6b\x65\x83\x28\xd0\x8e\xb8\xc4\x10\xe2\xd5\x4b\xfb\xa0\xf3\x3f\xf8\x0b\xdc\x30\x04\x5f\xbb\x73\x60\x65\x76\xa8\xfb\xc6\xba\x96\xa2\xb6\x1d\xbd\xfd\xf4\xbc\x66\xfb\xe0\x6d\x4b\x61\x72\xe1\xa4\x4e\xc7\x5c\x6a\x3f\x04\xb3\xb3\xf3\x6c\xf6\x9b\x63\x4e\x5f\x59\xd9\xe3\x35\xc5\x33\x7f\x26\x66\x9a\xfe\xdf\x94\xe5\x31\xa5\x98\x32\xe6\xd9\x00\x5b\x1c\x3e\x43\xa2\x22\x8d\x22\x5e\xda\xca\x18\x00\x58\xe9\xe5\x3a\x4d\x18\x92\x17\x7d\x72\xb9\x63\x46\xb1\x46\x05\x8a\x7d\xb1\xae\x2d\xc8\x66\x7f\x51\x32\x64\xde\x1e\xbf\x55\x77\xcd\x1d\x92\x66\x29\x3c\x3e\x29\xd4\x6b\x4c\x1f\xef\x9a\x5c\xcd\x54\x66\x75\xca\xb2\x0e\x9e\xa2\xeb\x34\x70\x88\x22\xac\xd5\x47\xc1\x61\x0d\xaa\x9b\x3f\x50\xfe\x50\xdf\x4a\xbf\x03\x00\x00\xff\xff\xbb\x9f\x39\x9d\xe1\x01\x00\x00")

func bindataSystemprobeTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataSystemprobeTmpl,
		"/systemprobe.tmpl",
	)
}

func bindataSystemprobeTmpl() (*asset, error) {
	bytes, err := bindataSystemprobeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/systemprobe.tmpl",
		size:        481,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTraceagentTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xd1\x6f\xfa\x36\x10\x7e\xcf\x5f\xf1\xe9\x27\xa6\x82\x04\x51\xfb\x1a\xa9\x0f\x54\xeb\xb6\x4a\x2b\x42\xb4\x5b\x1f\x27\x93\x1c\xc1\x22\xb1\x33\xdb\xa1\x62\x91\xff\xf7\xc9\x8e\x13\x12\xa0\xab\x96\x17\xec\xbb\xef\xbe\xbb\xef\x7c\x36\x8f\xdd\x17\x2d\xd7\xaf\x58\xe6\x24\x4c\x74\xb6\x21\x6a\x9a\x05\xf8\x0e\x31\x29\x25\x15\xac\x8d\x80\x37\xc3\x4c\xad\x13\xac\xa4\x81\xaa\x85\xe0\x22\x87\x54\xa8\x85\x22\x96\xee\xd9\xb6\x20\x48\x81\x42\xa6\xac\xd8\x4b\x6d\x92\xa6\x89\x2b\xa9\x8c\xb5\x71\x04\x3c\x3b\x9e\x04\x4d\xd3\x32\x5a\x1b\x35\x0d\x15\x9a\x46\xcc\x9b\x96\x35\x02\xd6\x3c\xf3\xe0\x8a\x67\x1e\xf1\x47\x65\x78\x49\xde\x54\xfb\xa5\xb5\xd0\x94\x4a\x91\xe9\x08\x78\xa5\x12\xac\x28\x64\xea\x00\xfb\xba\x64\x82\xff\x43\x88\x4b\x2a\xb5\x61\x46\xc7\x4b\xe7\xb3\x16\xdb\x93\x21\x87\xff\x4d\x6a\x23\x58\xe0\x4b\xa5\xd8\xf1\x3c\xee\x6c\x3e\xdd\x86\x52\xe2\x47\x52\x43\x40\x67\x73\x40\x6b\x93\x6b\xc7\xda\x8b\x75\x5a\x45\x56\x49\x2e\x8c\x4e\x22\x00\x70\xad\x54\x4c\xe4\x84\x09\x9f\x63\x42\x48\x1e\xd1\xc5\xf6\x50\x1f\xe8\xb0\x98\x90\xaf\x05\xbd\x65\x01\x12\x99\xdb\x0e\x0a\xc3\xb4\x52\x74\xe4\xb2\xd6\x28\xb9\xa8\x0d\xcd\x22\xe0\xf1\xcb\xaf\x67\xe2\x3b\xd0\xdf\x98\x16\x24\x10\xab\xc0\x35\xc3\x7d\xc8\xb5\x92\x30\x8a\xa5\xa4\x11\x7c\x19\xb8\x80\xd9\x13\x2e\xb2\xc5\xa3\xd2\x16\x7d\xa9\x03\x99\x46\x7b\x9d\x5d\x92\x4e\xce\x2f\x4a\x96\x68\x1a\xbe\x73\x88\xf8\x77\x26\x72\x6b\x9d\xe8\xb0\x81\xb5\x18\x6c\xff\x24\xa5\xb9\x14\xce\x3a\x0d\xe6\x17\x61\x48\x55\x8a\x8c\xe7\x9c\xcd\x91\x16\x9c\x84\xe9\xa2\xde\x5d\xfd\xea\x1c\xd7\x4d\x59\x2d\x0e\x42\x7e\x8a\x80\xd6\x4d\x43\x22\x0b\x25\x01\xef\x63\xd1\xc9\x88\x4c\x6f\xba\x5e\x84\x2a\xfa\x01\x3b\x43\x9e\xdc\x60\xa1\x9b\xb0\x59\xa0\x7d\xab\x98\xb8\xc1\xea\xcd\x03\xd2\x80\x6e\x1a\x7c\x72\xb3\xf7\x90\x0f\xa6\xc4\x9b\x51\xdc\x37\x24\xf8\x3f\x96\x9b\xd5\xcb\xea\x57\x4f\x13\x0f\xc3\xce\x4a\xc2\x81\x5c\x1e\xc7\x81\x4e\x73\x4c\x8e\xac\xa8\xdb\xd9\x53\xcc\xd0\xf6\xa4\x49\x1d\x79\x4a\x83\xd3\xeb\xc6\xc3\x05\xe0\x47\xf0\x27\x73\x12\xc7\xe4\x47\x0f\xfb\x99\x76\xac\x2e\x0c\x2a\xc5\xa5\xe2\xe6\x04\xcd\xca\xaa\x70\x95\x3a\x5a\x57\x5d\x45\x2a\x75\x27\xd2\x66\xb4\xf6\xa7\x73\x6d\xdd\x85\x07\xd6\x37\xc3\xb1\x93\x0a\x77\xae\x4f\xae\x04\x6b\xef\xbe\xe1\xbb\x54\x8e\xb1\x96\xc2\xb4\x62\x0b\x5e\x72\x43\x2a\x7e\x67\x2a\x27\xb3\x71\x89\x1e\xe2\x6e\xe8\xfb\xbe\x3a\xfb\x22\x40\x71\x20\xaa\x10\x32\xb3\x7c\xa4\xeb\x0b\xca\xeb\xc2\x22\xe0\x43\x79\xb6\xff\x73\x5b\xa3\xf3\x44\xfa\xe7\xc7\xdf\xc8\xbf\x3e\x3d\x51\xbc\x66\xa7\x42\xb2\x4c\x5b\x8b\x2a\x2c\xe7\x57\xa0\x36\xd8\xda\x70\x99\xaf\x01\xcf\x47\xf2\x4f\x0e\xc8\x2f\xe6\xa3\x57\x73\x84\xf4\x83\x3d\x78\x39\xfb\xd6\xe6\xe6\x02\xe9\x1f\x78\x8d\x7b\xd7\xd7\xbe\xa5\xe1\x62\x2d\xd7\x2f\xa0\xd6\x3f\x7d\x70\x2d\x98\x5d\x2b\x6b\xe3\xfd\x85\xed\x4f\xd5\xfd\x2f\xb4\x4d\xf0\xef\xf8\x77\x4d\x18\x81\x7c\xec\x53\x9d\x1e\xc8\x2b\xf5\x3e\x6c\xdb\xfd\x58\xf0\x28\xec\x3f\x05\x8f\x90\x37\x05\xfb\xac\x5f\xe9\xbd\x11\x7e\xd6\xdb\xfd\xfe\x1b\x00\x00\xff\xff\x63\x97\x85\xf6\x99\x07\x00\x00")

func bindataTraceagentTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTraceagentTmpl,
		"/trace-agent.tmpl",
	)
}

func bindataTraceagentTmpl() (*asset, error) {
	bytes, err := bindataTraceagentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "/trace-agent.tmpl",
		size:        1945,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1610603271, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/aggregator.tmpl":            bindataAggregatorTmpl,
	"/clusteragent.tmpl":          bindataClusteragentTmpl,
	"/collector.tmpl":             bindataCollectorTmpl,
	"/compliance.tmpl":            bindataComplianceTmpl,
	"/custommetricsprovider.tmpl": bindataCustommetricsproviderTmpl,
	"/dogstatsd.tmpl":             bindataDogstatsdTmpl,
	"/endpoints.tmpl":             bindataEndpointsTmpl,
	"/forwarder.tmpl":             bindataForwarderTmpl,
	"/header.tmpl":                bindataHeaderTmpl,
	"/jmxfetch.tmpl":              bindataJmxfetchTmpl,
	"/logsagent.tmpl":             bindataLogsagentTmpl,
	"/metadatamapper.tmpl":        bindataMetadatamapperTmpl,
	"/orchestrator.tmpl":          bindataOrchestratorTmpl,
	"/runtimesecurity.tmpl":       bindataRuntimesecurityTmpl,
	"/snmp-traps.tmpl":            bindataSnmptrapsTmpl,
	"/systemprobe.tmpl":           bindataSystemprobeTmpl,
	"/trace-agent.tmpl":           bindataTraceagentTmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"aggregator.tmpl":            {Func: bindataAggregatorTmpl, Children: map[string]*bintree{}},
		"clusteragent.tmpl":          {Func: bindataClusteragentTmpl, Children: map[string]*bintree{}},
		"collector.tmpl":             {Func: bindataCollectorTmpl, Children: map[string]*bintree{}},
		"compliance.tmpl":            {Func: bindataComplianceTmpl, Children: map[string]*bintree{}},
		"custommetricsprovider.tmpl": {Func: bindataCustommetricsproviderTmpl, Children: map[string]*bintree{}},
		"dogstatsd.tmpl":             {Func: bindataDogstatsdTmpl, Children: map[string]*bintree{}},
		"endpoints.tmpl":             {Func: bindataEndpointsTmpl, Children: map[string]*bintree{}},
		"forwarder.tmpl":             {Func: bindataForwarderTmpl, Children: map[string]*bintree{}},
		"header.tmpl":                {Func: bindataHeaderTmpl, Children: map[string]*bintree{}},
		"jmxfetch.tmpl":              {Func: bindataJmxfetchTmpl, Children: map[string]*bintree{}},
		"logsagent.tmpl":             {Func: bindataLogsagentTmpl, Children: map[string]*bintree{}},
		"metadatamapper.tmpl":        {Func: bindataMetadatamapperTmpl, Children: map[string]*bintree{}},
		"orchestrator.tmpl":          {Func: bindataOrchestratorTmpl, Children: map[string]*bintree{}},
		"runtimesecurity.tmpl":       {Func: bindataRuntimesecurityTmpl, Children: map[string]*bintree{}},
		"snmp-traps.tmpl":            {Func: bindataSnmptrapsTmpl, Children: map[string]*bintree{}},
		"systemprobe.tmpl":           {Func: bindataSystemprobeTmpl, Children: map[string]*bintree{}},
		"trace-agent.tmpl":           {Func: bindataTraceagentTmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
